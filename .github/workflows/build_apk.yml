name: Build APK with Buildozer (Otimizado)

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Instalar dependências base
        run: |
          sudo apt-get update
          sudo apt-get install -y git zip unzip openjdk-17-jdk python3 python3-pip libffi-dev libssl-dev curl

      - name: Instalar Buildozer e dependências Python
        run: |
          pip install --upgrade pip
          pip install buildozer==1.2.0 cython

      # 🔄 Limpa cache antigo do Buildozer e SDK interno
      - name: Limpar cache do Buildozer
        run: |
          rm -rf .buildozer/
          rm -rf ~/.buildozer/
          echo "🧹 Cache do Buildozer limpo!"

      # ⚙️ Configura Android SDK e NDK modernos automaticamente
      - name: Configurar Android SDK (ação oficial)
        uses: android-actions/setup-android@v3
        with:
          packages: |
            build-tools;33.0.2
            platforms;android-33
            ndk;25.2.9519653

      # 🧩 Corrige o caminho do SDK no buildozer.spec
      - name: Corrigir buildozer.spec
        run: |
          sed -i "s|android.sdk_path = .*|android.sdk_path = $ANDROID_SDK_ROOT|" buildozer.spec || echo "android.sdk_path = $ANDROID_SDK_ROOT" >> buildozer.spec
          echo "✅ Caminho do SDK ajustado: $ANDROID_SDK_ROOT"

      # 📦 Descompacta o pacote do app
      - name: Preparar projeto
        run: |
          if [ -f "./analista_esportivo_app_package.zip" ]; then
            unzip -o analista_esportivo_app_package.zip
            echo "📦 Pacote do app descompactado com sucesso!"
          fi

      # 🏗️ Constrói o APK
      - name: Construir APK com Buildozer
        run: |
          buildozer android debug

      # 📤 Faz upload do APK gerado
      - name: Upload do APK
        uses: actions/upload-artifact@v4
        with:
          name: Analista-Esportivo-APK
          path: bin/*.apk
